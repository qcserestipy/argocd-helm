# -- Used when you manage applications in the same cluster where Argo CD runs
createClusterRoles: true

# -- Custom resource configuration
crds:
  install: true
  keep: true

global:
  domain: local.argocd.com

# -- Argo Configs
configs:
  secret:
    createSecret: false
  cm:
    # -- Create the argocd-cm configmap for [declarative setup]
    create: true
    extension.config: |-
      extensions:
        - name: metrics
          backend:
            services:
              - url: argocd-metrics-server.argocd.svc.cluster.local
    application.resourceTrackingMethod: annotation
    resource.customizations: |
      "*.upbound.io/*":
        health.lua: |
          health_status = {
            status = "Progressing",
            message = "Provisioning ..."
          }

          local function contains (table, val)
            for i, v in ipairs(table) do
              if v == val then
                return true
              end
            end
            return false
          end

          local has_no_status = {
            "ProviderConfig",
            "ProviderConfigUsage"
          }

          if obj.status == nil or next(obj.status) == nil and contains(has_no_status, obj.kind) then
            health_status.status = "Healthy"
            health_status.message = "Resource is up-to-date."
            return health_status
          end

          if obj.status == nil or next(obj.status) == nil or obj.status.conditions == nil then
            if obj.kind == "ProviderConfig" and obj.status.users ~= nil then
              health_status.status = "Healthy"
              health_status.message = "Resource is in use."
              return health_status
            end
            return health_status
          end

          for i, condition in ipairs(obj.status.conditions) do
            if condition.type == "LastAsyncOperation" then
              if condition.status == "False" then
                health_status.status = "Degraded"
                health_status.message = condition.message
                return health_status
              end
            end

            if condition.type == "Synced" then
              if condition.status == "False" then
                health_status.status = "Degraded"
                health_status.message = condition.message
                return health_status
              end
            end

            if condition.type == "Ready" then
              if condition.status == "True" then
                health_status.status = "Healthy"
                health_status.message = "Resource is up-to-date."
                return health_status
              end
            end
          end

          return health_status

      "*.crossplane.io/*":
        health.lua: |
          health_status = {
            status = "Progressing",
            message = "Provisioning ..."
          }

          local function contains (table, val)
            for i, v in ipairs(table) do
              if v == val then
                return true
              end
            end
            return false
          end

          local has_no_status = {
            "Composition",
            "CompositionRevision",
            "DeploymentRuntimeConfig",
            "ControllerConfig",
            "ProviderConfig",
            "ProviderConfigUsage"
          }
          if obj.status == nil or next(obj.status) == nil and contains(has_no_status, obj.kind) then
              health_status.status = "Healthy"
              health_status.message = "Resource is up-to-date."
            return health_status
          end

          if obj.status == nil or next(obj.status) == nil or obj.status.conditions == nil then
            if obj.kind == "ProviderConfig" and obj.status.users ~= nil then
              health_status.status = "Healthy"
              health_status.message = "Resource is in use."
              return health_status
            end
            return health_status
          end

          for i, condition in ipairs(obj.status.conditions) do
            if condition.type == "LastAsyncOperation" then
              if condition.status == "False" then
                health_status.status = "Degraded"
                health_status.message = condition.message
                return health_status
              end
            end

            if condition.type == "Synced" then
              if condition.status == "False" then
                health_status.status = "Degraded"
                health_status.message = condition.message
                return health_status
              end
            end

            if contains({"Ready", "Healthy", "Offered", "Established"}, condition.type) then
              if condition.status == "True" then
                health_status.status = "Healthy"
                health_status.message = "Resource is up-to-date."
                return health_status
              end
            end
          end

          return health_status
      
    resource.exclusions: |
      - apiGroups:
        - "*"
        kinds:
        - ProviderConfigUsage    
  params:
    # -- Create the argocd-cmd-params-cm configmap
    create: true
  rbac:
    create: false

# -- Application controller
controller:
  serviceAccount:
    create: true
  replicas: 1
  resources:
    limits:
      cpu: 500m
      memory: 1024Mi
    requests:
      cpu: 250m
      memory: 256Mi

# -- Dex
dex:
  enabled: false

# -- Redis
redis:
  enabled: true
  name: redis
  serviceAccount:
    create: true
    name: argocd-redis
  resources:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 50m
      memory: 64Mi

# -- Server
server:
  name: server
  insecure: true
  replicas: 1
  serviceAccount:
    create: true
    name: argocd-server
  extraArgs:
    - --insecure
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 50
    targetMemoryUtilizationPercentage: 50
    behavior:
      scaleDown:
        stabilizationWindowSeconds: 120
        policies:
          - type: Pods
            value: 1
            periodSeconds: 60
      scaleUp:
        stabilizationWindowSeconds: 120
        policies:
          - type: Pods
            value: 5
            periodSeconds: 60
  resources:
    limits:
      cpu: 1000m
      memory: 256Mi
    requests:
      cpu: 500m
      memory: 128Mi
  ingress:
    enabled: true
    annotations:
      nginx.ingress.kubernetes.io/ssl-passthrough: "false"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
    ingressClassName: "nginx"
    hosts:
      - host: local.argocd.com
        paths:
          - path: /
            pathType: Prefix
    https: false
  extensions:
    enabled: true
    extensionList:
    - name: extension-metrics
      env:
        - name: EXTENSION_URL
          value: https://github.com/argoproj-labs/argocd-extension-metrics/releases/download/v1.0.3/extension.tar.gz
        - name: EXTENSION_CHECKSUM_URL
          value: https://github.com/argoproj-labs/argocd-extension-metrics/releases/download/v1.0.3/extension_checksums.txt

# -- Repo Server
repoServer:
  name: repo-server
  serviceAccount:
    create: true
    name: 'argocd-repo-server'
  replicas: 1
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 50
    targetMemoryUtilizationPercentage: 50
    behavior:
      scaleDown:
        stabilizationWindowSeconds: 120
        policies:
          - type: Pods
            value: 1
            periodSeconds: 120
      scaleUp:
        stabilizationWindowSeconds: 120
        policies:
          - type: Pods
            value: 5
            periodSeconds: 60
  resources:
    limits:
      cpu: 250m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 64Mi
  # TLS certificate configuration via Secret
  ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/tls/#configuring-tls-to-argocd-repo-server
  ## Note: Issuing certificates via cert-manager in not supported right now because it's not possible to restart repo server automatically without extra controllers.
  certificateSecret:
    # -- Create argocd-repo-server-tls secret
    enabled: false
    # -- Annotations to be added to argocd-repo-server-tls secret
    annotations: {}
    # -- Labels to be added to argocd-repo-server-tls secret
    labels: {}
    # -- Certificate authority. Required for self-signed certificates.
    ca: ''
    # -- Certificate private key
    key: ''
    # -- Certificate data. Must contain SANs of Repo service (ie: argocd-repo-server, argocd-repo-server.argo-cd.svc)
    crt: ''
  rbac: []
  #   - apiGroups:
  #     - argoproj.io
  #     resources:
  #     - applications
  #     verbs:
  #     - get
  #     - list
  #     - watch

# -- ApplicationSet controller
applicationSet:
  enabled: true
  name: applicationset-controller
  replicaCount: 1
  serviceAccount:
    create: true
    name: argocd-applicationset-controller
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi

# -- Notifications controller
notifications:
  enabled: false
  name: notifications-controller
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
  serviceAccount:
    create: true
    name: argocd-notifications-controller
